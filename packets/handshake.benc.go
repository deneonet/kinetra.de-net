// Code generated by bencgen golang. DO NOT EDIT.
// source: ../schemas/Handshake.benc

package packets

import (
    "github.com/deneonet/benc/std"
    "github.com/deneonet/benc/impl/gen"
)

// Struct - HandshakePacket
type HandshakePacket struct {
    Id byte
    Payload []byte
}

// Reserved Ids - HandshakePacket
var handshakePacketRIds = []uint16{}

// Size - HandshakePacket
func (handshakePacket *HandshakePacket) Size() int {
    return handshakePacket.size(0)
}

// Nested Size - HandshakePacket
func (handshakePacket *HandshakePacket) size(id uint16) (s int) {
    s += bstd.SizeByte() + 2
    s += bstd.SizeBytes(handshakePacket.Payload) + 2

    if id > 255 {
        s += 5
        return
    }
    s += 4
    return
}

// SizePlain - HandshakePacket
func (handshakePacket *HandshakePacket) SizePlain() (s int) {
    s += bstd.SizeByte()
    s += bstd.SizeBytes(handshakePacket.Payload)
    return
}

// Marshal - HandshakePacket
func (handshakePacket *HandshakePacket) Marshal(b []byte) {
    handshakePacket.marshal(0, b, 0)
}

// Nested Marshal - HandshakePacket
func (handshakePacket *HandshakePacket) marshal(tn int, b []byte, id uint16) (n int) {
    n = bgenimpl.MarshalTag(tn, b, bgenimpl.Container, id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Fixed8, 1)
    n = bstd.MarshalByte(n, b, handshakePacket.Id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Bytes, 2)
    n = bstd.MarshalBytes(n, b, handshakePacket.Payload)

    n += 2
    b[n-2] = 1
    b[n-1] = 1
    return
}

// MarshalPlain - HandshakePacket
func (handshakePacket *HandshakePacket) MarshalPlain(tn int, b []byte) (n int) {
    n = tn
    n = bstd.MarshalByte(n, b, handshakePacket.Id)
    n = bstd.MarshalBytes(n, b, handshakePacket.Payload)
    return n
}

// Unmarshal - HandshakePacket
func (handshakePacket *HandshakePacket) Unmarshal(b []byte) (err error) {
    _, err = handshakePacket.unmarshal(0, b, []uint16{}, 0)
    return
}

// Nested Unmarshal - HandshakePacket
func (handshakePacket *HandshakePacket) unmarshal(tn int, b []byte, r []uint16, id uint16) (n int, err error) {
    var ok bool
    if n, ok, err = bgenimpl.HandleCompatibility(tn, b, r, id); !ok {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, handshakePacketRIds, 1); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, handshakePacket.Id, err = bstd.UnmarshalByte(n, b); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, handshakePacketRIds, 2); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, handshakePacket.Payload, err = bstd.UnmarshalBytes(n, b); err != nil {
            return
        }
    }
    n += 2
    return
}

// UnmarshalPlain - HandshakePacket
func (handshakePacket *HandshakePacket) UnmarshalPlain(tn int, b []byte) (n int, err error) {
    n = tn
    if n, handshakePacket.Id, err = bstd.UnmarshalByte(n, b); err != nil {
        return
    }
    if n, handshakePacket.Payload, err = bstd.UnmarshalBytes(n, b); err != nil {
        return
    }
    return
}

