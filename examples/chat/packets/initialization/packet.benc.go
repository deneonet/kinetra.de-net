// Code generated by bencgen golang. DO NOT EDIT.
// source: .\initialization\packet.benc

package initialization

import (
    "github.com/deneonet/benc/std"
    "github.com/deneonet/benc/impl/gen"
)

// Struct - Username
type Username struct {
    Data string
}

// Reserved Ids - Username
var usernameRIds = []uint16{}

// Size - Username
func (username *Username) Size() int {
    return username.size(0)
}

// Nested Size - Username
func (username *Username) size(id uint16) (s int) {
    s += bstd.SizeString(username.Data) + 2

    if id > 255 {
        s += 5
        return
    }
    s += 4
    return
}

// SizePlain - Username
func (username *Username) SizePlain() (s int) {
    s += bstd.SizeString(username.Data)
    return
}

// Marshal - Username
func (username *Username) Marshal(b []byte) {
    username.marshal(0, b, 0)
}

// Nested Marshal - Username
func (username *Username) marshal(tn int, b []byte, id uint16) (n int) {
    n = bgenimpl.MarshalTag(tn, b, bgenimpl.Container, id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Bytes, 1)
    n = bstd.MarshalString(n, b, username.Data)

    n += 2
    b[n-2] = 1
    b[n-1] = 1
    return
}

// MarshalPlain - Username
func (username *Username) MarshalPlain(tn int, b []byte) (n int) {
    n = tn
    n = bstd.MarshalString(n, b, username.Data)
    return n
}

// Unmarshal - Username
func (username *Username) Unmarshal(b []byte) (err error) {
    _, err = username.unmarshal(0, b, []uint16{}, 0)
    return
}

// Nested Unmarshal - Username
func (username *Username) unmarshal(tn int, b []byte, r []uint16, id uint16) (n int, err error) {
    var ok bool
    if n, ok, err = bgenimpl.HandleCompatibility(tn, b, r, id); !ok {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, usernameRIds, 1); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, username.Data, err = bstd.UnmarshalString(n, b); err != nil {
            return
        }
    }
    n += 2
    return
}

// UnmarshalPlain - Username
func (username *Username) UnmarshalPlain(tn int, b []byte) (n int, err error) {
    n = tn
    if n, username.Data, err = bstd.UnmarshalString(n, b); err != nil {
        return
    }
    return
}

// Struct - Response
type Response struct {
    Data byte
}

// Reserved Ids - Response
var responseRIds = []uint16{}

// Size - Response
func (response *Response) Size() int {
    return response.size(0)
}

// Nested Size - Response
func (response *Response) size(id uint16) (s int) {
    s += bstd.SizeByte() + 2

    if id > 255 {
        s += 5
        return
    }
    s += 4
    return
}

// SizePlain - Response
func (response *Response) SizePlain() (s int) {
    s += bstd.SizeByte()
    return
}

// Marshal - Response
func (response *Response) Marshal(b []byte) {
    response.marshal(0, b, 0)
}

// Nested Marshal - Response
func (response *Response) marshal(tn int, b []byte, id uint16) (n int) {
    n = bgenimpl.MarshalTag(tn, b, bgenimpl.Container, id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Fixed8, 1)
    n = bstd.MarshalByte(n, b, response.Data)

    n += 2
    b[n-2] = 1
    b[n-1] = 1
    return
}

// MarshalPlain - Response
func (response *Response) MarshalPlain(tn int, b []byte) (n int) {
    n = tn
    n = bstd.MarshalByte(n, b, response.Data)
    return n
}

// Unmarshal - Response
func (response *Response) Unmarshal(b []byte) (err error) {
    _, err = response.unmarshal(0, b, []uint16{}, 0)
    return
}

// Nested Unmarshal - Response
func (response *Response) unmarshal(tn int, b []byte, r []uint16, id uint16) (n int, err error) {
    var ok bool
    if n, ok, err = bgenimpl.HandleCompatibility(tn, b, r, id); !ok {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, responseRIds, 1); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, response.Data, err = bstd.UnmarshalByte(n, b); err != nil {
            return
        }
    }
    n += 2
    return
}

// UnmarshalPlain - Response
func (response *Response) UnmarshalPlain(tn int, b []byte) (n int, err error) {
    n = tn
    if n, response.Data, err = bstd.UnmarshalByte(n, b); err != nil {
        return
    }
    return
}

