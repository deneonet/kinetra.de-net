// Code generated by bencgen go. DO NOT EDIT.
// source: handshake_packet.benc

package handshake

import (
    "github.com/deneonet/benc/std"
    "github.com/deneonet/benc/impl/gen"


)

// Enum - PacketType
type PacketType int
const (
    PacketTypeCertificateRequest PacketType = iota
    PacketTypeCertificateResponse
    PacketTypeServerVerification
    PacketTypeClientInformation
)

// Struct - Packet
type Packet struct {
    Payload []byte
    Type PacketType
}

// Reserved Ids - Packet
var packetRIds = []uint16{}

// Size - Packet
func (packet *Packet) Size() int {
    return packet.NestedSize(0)
}

// Nested Size - Packet
func (packet *Packet) NestedSize(id uint16) (s int) {
    s += bstd.SizeBytes(packet.Payload) + 2
    s += bgenimpl.SizeEnum(packet.Type) + 2

    if id > 255 {
        s += 5
        return
    }
    s += 4
    return
}

// SizePlain - Packet
func (packet *Packet) SizePlain() (s int) {
    s += bstd.SizeBytes(packet.Payload)
    s += bgenimpl.SizeEnum(packet.Type)
    return
}

// Marshal - Packet
func (packet *Packet) Marshal(b []byte) {
    packet.NestedMarshal(0, b, 0)
}

// Nested Marshal - Packet
func (packet *Packet) NestedMarshal(tn int, b []byte, id uint16) (n int) {
    n = bgenimpl.MarshalTag(tn, b, bgenimpl.Container, id)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.Bytes, 1)
    n = bstd.MarshalBytes(n, b, packet.Payload)
    n = bgenimpl.MarshalTag(n, b, bgenimpl.ArrayMap, 2)
    n = bgenimpl.MarshalEnum(n, b, packet.Type)

    n += 2
    b[n-2] = 1
    b[n-1] = 1
    return
}

// MarshalPlain - Packet
func (packet *Packet) MarshalPlain(tn int, b []byte) (n int) {
    n = tn
    n = bstd.MarshalBytes(n, b, packet.Payload)
    n = bgenimpl.MarshalEnum(n, b, packet.Type)
    return n
}

// Unmarshal - Packet
func (packet *Packet) Unmarshal(b []byte) (err error) {
    _, err = packet.NestedUnmarshal(0, b, []uint16{}, 0)
    return
}

// Nested Unmarshal - Packet
func (packet *Packet) NestedUnmarshal(tn int, b []byte, r []uint16, id uint16) (n int, err error) {
    var ok bool
    if n, ok, err = bgenimpl.HandleCompatibility(tn, b, r, id); !ok {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, packetRIds, 1); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, packet.Payload, err = bstd.UnmarshalBytes(n, b); err != nil {
            return
        }
    }
    if n, ok, err = bgenimpl.HandleCompatibility(n, b, packetRIds, 2); err != nil {
        if err == bgenimpl.ErrEof {
            return n, nil
        }
        return
    }
    if ok {
        if n, packet.Type, err = bgenimpl.UnmarshalEnum[PacketType](n, b); err != nil {
            return
        }
    }
    n += 2
    return
}

// UnmarshalPlain - Packet
func (packet *Packet) UnmarshalPlain(tn int, b []byte) (n int, err error) {
    n = tn
    if n, packet.Payload, err = bstd.UnmarshalBytes(n, b); err != nil {
        return
    }
    if n, packet.Type, err = bgenimpl.UnmarshalEnum[PacketType](n, b); err != nil {
        return
    }
    return
}

